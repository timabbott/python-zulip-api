#!/usr/bin/env python3

# Zulip notification post-receive hook.
#
# The "post-receive" script is run after receive-pack has accepted a pack
# and the repository has been updated.  It is passed arguments in through
# stdin in the form
#  <oldrev> <newrev> <refname>
# For example:
#  aa453216d1b3e49e7f6f98441fa56946ddcd6a20 68f7abf4e6f922807889f52bc043ecd31b79f814 refs/heads/master

from typing import Text
import os
import sys
import subprocess
import os.path

sys.path.insert(0, os.path.dirname(__file__))
import zulip_git_config as config

VERSION = "0.9"
EMPTY_SHA = "0000000000000000000000000000000000000000"
COMMIT_ROW_TEMPLATE = '* {author_name} commited {subject} ([{commit_short_hash}]({commit_url}))\n'

if config.ZULIP_API_PATH is not None:
    sys.path.append(config.ZULIP_API_PATH)

import zulip
client = zulip.Client(
    email=config.ZULIP_USER,
    site=config.ZULIP_SITE,
    api_key=config.ZULIP_API_KEY,
    client="ZulipGit/" + VERSION)

def git_repository_name() -> Text:
    output = subprocess.check_output(["git", "rev-parse", "--is-bare-repository"])
    if output.strip() == "true":
        return os.path.basename(os.getcwd())[:-len(".git")]
    else:
        return os.path.basename(os.path.dirname(os.getcwd()))

def git_commit_range(oldrev: str, newrev: str) -> str:
    remote_repo_cmd = ["git", "config", "--get", "remote.origin.url"]
    remote_repo_url = subprocess.check_output(remote_repo_cmd).strip().decode("utf-8")

    log_cmd = ["git", "log", "--reverse",
               "--pretty=%aN%n%H%n%h%n%s", "%s..%s" % (oldrev, newrev)]
    commits = ''
    output = subprocess.check_output(log_cmd, universal_newlines=True).splitlines()
    it = iter(output)
    for _ in range(len(output)//4):
        author_name = next(iter(it))
        commit_hash = next(iter(it))
        commit_short_hash = next(iter(it))
        subject = next(iter(it))
        commits += COMMIT_ROW_TEMPLATE.format(
            author_name=author_name,
            commit_short_hash=commit_short_hash,
            subject=subject,
            commit_url="{}/commit/{}".format(remote_repo_url, commit_hash)
        )

    return commits

def send_bot_message(oldrev: str, newrev: str, refname: str) -> None:
    repo_name   = git_repository_name()
    branch      = refname.replace('refs/heads/', '')
    destination = config.commit_notice_destination(repo_name, branch, newrev)
    if destination is None:
        # Don't forward the notice anywhere
        return

    new_head = newrev[:12]
    old_head = oldrev[:12]

    if oldrev == EMPTY_SHA or newrev == EMPTY_SHA:
        # New branch pushed or old branch removed
        added = ''
        removed = ''
    else:
        added   = git_commit_range(oldrev, newrev)
        removed = git_commit_range(newrev, oldrev)

    if oldrev == EMPTY_SHA:
        message = '`%s` was pushed to new branch `%s`' % (new_head, branch)
    elif newrev == EMPTY_SHA:
        message = 'branch `%s` was removed (was `%s`)' % (branch, old_head)
    elif removed:
        message = '`%s` was pushed to `%s`, **REMOVING**:\n\n%s' % (new_head, branch, removed)
        if added:
            message += '\n**and adding**:\n\n' + added
        message += '\n**A HISTORY REWRITE HAS OCCURRED!**'
        message += '\n@everyone: Please check your local branches to deal with this.'
    elif added:
        message = '`%s` was deployed to `%s` with:\n\n%s' % (new_head, branch, added)
    else:
        message = '`%s` was pushed to `%s`... but nothing changed?' % (new_head, branch)

    message_data = {
        "type": "stream",
        "to": destination["stream"],
        "subject": destination["subject"],
        "content": message,
    }
    client.send_message(message_data)

for ln in sys.stdin:
    oldrev, newrev, refname = ln.strip().split()
    send_bot_message(oldrev, newrev, refname)
